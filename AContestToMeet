import java.util.*;
import java.io.*;

public class acm {

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub

		//Scanner lector = new Scanner(System.in);
BufferedWriter esc=new BufferedWriter(new OutputStreamWriter(System.out));
BufferedReader lector=new BufferedReader(new InputStreamReader(System.in));
String s;
		while ((s=lector.readLine())!=null) {

			String[] va=s.split(" ");
			int n = Integer.parseInt(va[0]);
			int m = Integer.parseInt(va[1]);
			int[][] matriz = new int[n][n];

			for (int i = 0; i < matriz.length; i++) {
				for (int j = 0; j < matriz.length; j++) {
					if(i!=j)
					matriz[i][j] = Integer.MAX_VALUE;
				}
			}
			for (int i = 0; i < m; i++) {
				String[] act=lector.readLine().split(" ");
				int v1 = Integer.parseInt(act[0]);
				int v2 = Integer.parseInt(act[1]);
				int peso = Integer.parseInt(act[2]);
				matriz[v1][v2] = peso;
				matriz[v2][v1] = peso;
			}
			String[] act=lector.readLine().split(" ");
			double[] arreglo = new double[3];
			arreglo[0] = Double.parseDouble(act[0]);
			arreglo[1] =Double.parseDouble(act[1]);
			arreglo[2] = Double.parseDouble(act[2]);
			Arrays.sort(arreglo);
			for (int k = 0; k < n; k++) {
				// Pick all vertices as source one by one
				for (int i = 0; i < n; i++) {
					// Pick all vertices as destination for the
					// above picked source
					for (int j = 0; j < n; j++) {
						if ((matriz[i][k]!=Integer.MAX_VALUE && matriz[k][j]!=Integer.MAX_VALUE) && matriz[i][k] + matriz[k][j] < matriz[i][j])
							matriz[i][j] = matriz[i][k] + matriz[k][j];

					}
				}
			}

			int mayor = 0;
			for (int i = 0; i < matriz.length; i++) {
				for (int j = 0; j < matriz.length; j++) {
					if (matriz[i][j] != Integer.MAX_VALUE)
						mayor = Math.max(mayor, matriz[i][j]);
				}
			}
			double res=mayor/arreglo[0];
			int subida=(int)Math.ceil(res);
			esc.write(subida+"\n");

		}
		esc.flush();

	}

}
